// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //primary architecture
    RAM16K(in=in,load=Ramload,address=address[0..13],out=Ramout);
    Screen(in=in,load=Screenload,address=address[0..12],out=Screenout);
    Keyboard(out=Keyout);

    DMux4Way(in=load,sel=address[13..14],a=Ramload1,b=Ramload2,c=Screenload,d=Keyload);
    Or(a=Ramload1,b=Ramload2,out=Ramload);//passes ramload 1 and ramload2 to single var
    Mux4Way16(a=Ramout,b=Ramout,c=Screenout,d=Keyout,sel=address[13..14],out=out);


    // Put your code here:

    //binary for first 16k is 0011.... ie ram
    //screen is 0100................ 
    //keyboard is 0110................
    //dmux 4 way bits 13 and 14 ie 00(ram start) 01(ram end) 10(screen start) 11(keyboard)
    //mux4way to out
    //tested complete
}