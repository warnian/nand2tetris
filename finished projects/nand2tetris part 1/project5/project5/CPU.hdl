// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //16 instruction "ixxaccccccdddjjj" 
    //primary architecture:
    ALU(x=Dregout,y=Mux2out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,out=outM,zr=zr,ng=ng);//input is D register and mux 2
    ARegister(in=Mux1out,load=AregLoad,out=Aregout,out[0..14]=addressM); //a reg
    DRegister(in=ALUout,load=DregLoad,out=Dregout);//d reg
    Mux16(a[0..14]=instruction[0..14],a[15]=false,b=ALUout,sel=instruction[15],out=Mux1out); //mux 1 alu input instruction input 
    Mux16(a=Aregout,b=inM,sel=instruction[12],out=Mux2out); //mux 2 inM input A regist input
    PC(in=Aregout,load=loadJMP,inc=inc,reset=reset,out[0..14]=pc);//need to cut down 1 bit from pc outiepcout[1..15]

    //helper chips
    
    And(a=instruction[3],b=instruction[15],out=writeM);//determines write or no

    Not(in=instruction[15],out=Ainstruction);//a instruction ie instruction[15] is 0 therefore yes load a
    Or(a=instruction[5],b=Ainstruction,out=AregLoad); //passes a instruction
    And(a=instruction[4],b=instruction[15],out=DregLoad);//passes d instruction
    //jump section
    //last 3 bits in instruction are jump
    Not(in=zr,out=notzr);
    Not(in=ng,out=notng);
    And(a=notzr,b=notng,out=pos);
    
    And(a=pos,b=instruction[0],out=JGT);//if j3 and out is greater than 0
    And(a=ng,b=instruction[2],out=JLT);//if j1 and out is less than 0
    And(a=zr,b=instruction[1],out=JEQ);//if j2 and out is = 0
    Or(a=JLT,b=JEQ,out=JLE);//if less than or equal
    Or(a=JLE,b=JGT,out=JMP);//jump
    And(a=JMP,b=instruction[15],out=loadJMP);//assert load bit if jump condition is met (ie jump)
    Not(in=loadJMP,out=inc);//if not jump then inc
    

}
//c$ means need to figure out which c and replace
//16 instruction "ixxaccccccdddjjj" 
//instruction[3]=write to memory
//instruction[4]=write to D
//instruction[5]=write to A

//IT LIIIIIIVES I did it lol