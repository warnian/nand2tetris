// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
	Mux16(a=x,b=false,sel=zx,out=zxThru); 
	Not16(in=zxThru,out=nxThru);
	Mux16(a=zxThru,b=nxThru,sel=nx,out=xThru); //result x after zx and nx

	Mux16(a=y,b=false,sel=zy,out=zyThru);
	Not16(in=zyThru,out=nyThru);
	Mux16(a=zyThru,b=nyThru,sel=ny,out=yThru);//resuly y after zy and ny
	
	//f
	
	And16(a=xThru,b=yThru,out=AndThru);
	Add16(a=xThru,b=yThru,out=AddThru);
	Mux16(a=AndThru,b=AddThru,sel=f,out=fThru); //<----- DOES NOT WORK when a=AddThru and b=AndThru for god knows why
	Not16(in=fThru,out=notfThru);
	
	Mux16(a=fThru,b=notfThru,sel=no,out[15]=s,out[0..14]=t); 
	Mux16(a=fThru,b=notfThru,sel=no,out[0..7]=bus1,out[8..15]=bus2);
	//zr
	
	
	Or8Way(in=bus1,out=zr1);
	Or8Way(in=bus2,out=zr2);
	Or(a=zr2,b=zr1,out=zr1bit);
	Not(in=zr1bit,out=zr);
	//ng
	Mux16(a=fThru,b=notfThru,sel=no,out=out);
	Mux(a=false,b=true,sel=s,out=ng);
	
//finaloutput
}
	
	