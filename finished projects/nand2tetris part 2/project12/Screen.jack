// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */

 //takes forever to run? something is wrong I think
class Screen {
    static Array screen;
    
    static boolean screenColor;
    static Array twoToThe;
    /** Initializes the Screen. */
    function void init() {
        
        let screen=16384;
        
        let screenColor=true;
        
        let twoToThe=Array.new(16);
        let twoToThe[0]=1;//2^0 0000000000000001
        let twoToThe[1]=2;//2^1 0000000000000010
        let twoToThe[2]=4;//2^2 0000000000000100
        let twoToThe[3]=8;//0000000000001000
        let twoToThe[4]=16;//0000000000010000 etc... etc..
        let twoToThe[5]=32;
        let twoToThe[6]=64;
        let twoToThe[7]=128;
        let twoToThe[8]=256;
        let twoToThe[9]=512;
        let twoToThe[10]=1024;
        let twoToThe[11]=2048;
        let twoToThe[12]=4096;
        let twoToThe[13]=8192;
        let twoToThe[14]=16834;
        let twoToThe[15]=16384+16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        //(256*512)/16= 8192
        
        var int i;
        let i=0;
        while (i<8192){
            let screen[i]=false;

        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let screenColor = b;
        return;
    }
    function int mod(int x, int y){
        return (x-((x/y)*y));
    }
    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
       
        var int address;
        var int value;
        var int valueOr;
        var int cur_bit;
      
        let address=(32*y)+(x/16);
        let cur_bit = Screen.mod(x,16);
        let value = Memory.peek(16384+address);
        let valueOr = value | twoToThe[cur_bit];
        
        if (screenColor){
            let value = value | twoToThe[cur_bit];
        }
        else {
            let value = value & ~twoToThe[cur_bit];
        }
        do Memory.poke(16384+address,value);

        return;
    }
    

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
   
    function void drawLine(int x1, int y1, int x2, int y2) {
        
        
        var int dx,dy;
        var int a,b;
        var int slope;
        var int diff;
        var int temp;
        
        let diff=0;
        let a=0;
        let b=0;
        let temp=0;
        
    
        if (~(x1 < x2)) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2-x1;
        let dy = y2-y1;
        if (dy<0){
            let slope = -1;
        }
        else{
            let slope = 1;
        }
       
        //horizontal line
        if (dy=0){
            while (~(a=dx)){
                let a = a + 1;
                do Screen.drawPixel(x1+a,y1); 
            }
            return;
        }

        //vertical line
        if (dx=0){
            while (~(b=dy)){
                let b = b + slope;
                do Screen.drawPixel(x1,y1+b);
            }
            return;
        }
        //diagonal line
        while ((a < dx) & (b < dy)) {
            let diff = (a * dy) - (b * dx);
            if (diff < 0) {
                let a = a + 1;
            } 
            else {
                let b = b + 1;
            }
            do Screen.drawPixel(x1 + a, y1 + b);
            }

        while ((a < dx) & (b > dy)) {
            let diff = (a * dy) - (b * dx);

            if (diff > 0) {
                let a = a + 1;
            } 
            else {
                let b = b - 1;
            }
            do Screen.drawPixel(x1 + a, y1 + b);
        }
                
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        
        var int dx,dy,a,b;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a=0;
        let b=0;
        while (b<dy){
            while (a<dx){
                do Screen.drawPixel(x1+a,y1+b);
                let a=a+1;
            }
            let a=0;
            let b= b + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy,root;
        if (r<127){
            let dy = -r;
            
            while (dy<r){
                let root=Math.sqrt((r*r)-(dy*dy));
                

                do Screen.drawLine(x-root,y+dy,x+root,y+dy);
                let dy = dy + 1;

            }

        }
        else{
            do Output.printString("radius is too large");
        }
        return;
    }
}
