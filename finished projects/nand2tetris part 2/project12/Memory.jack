// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
//HEAP BASE is 2048
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heap;
    static Array ram;
    static Array freeList;
    static int block_loc;
    static int heapBase;
    /** Initializes the class. */
    function void init() {
        let heap = 2048; 
        let heapBase = 2048;
        let freeList=heapBase; //freeList base
        let heap[0]=14336;//length of heap
        let heap[1]=null; // next pointer
        let ram=0;
        let block_loc = -1;
        return;
    }
        
    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */

     //first fit algorithm for my sanity
    function int alloc(int size) {
        var int curBlock;
        var int parBlock;
        var int segSize;
        var boolean blockFound;
        var int blockLoc;
        let curBlock = freeList;
        let parBlock = freeList;
        while (~blockFound & (curBlock>0)){
            let segSize=freeList;
            
            if ((segSize-size-2)>0){ //big enough block 
                if (curBlock = freeList){
                    let freeList = curBlock + size +1;
                }
                else {
                    let heap[freeList+1] = curBlock + size + 1; //update pointer
                }
                let freeList = freeList + size + 1;
                let freeList[size] = freeList[0] - size -1;
                let blockLoc = curBlock+1;
                let blockFound = true;
            }
            else{ //current block not big enough more searching
                
                if(segSize>size){
                    if(curBlock = freeList){
                        let freeList = heap[curBlock+1]; //freelist shift to current's children
                    }
                    else{
                        let heap[parBlock+1] = heap[curBlock+1];  //parent point to current's children
                    }
                    let blockFound = true;
                    let blockLoc = curBlock + 1; 
                }
                else{
                    let parBlock = curBlock;
                    let curBlock = heap[curBlock+1];
                }

            }
        }
        return blockLoc;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let heap[o] = freeList;
        let freeList = o - 1;
        return;
    }    
}
