//location= (x/16) + (y*32)
//screen is 256 rows by 512 columns
class Helicopter{
    

    field int x; //fixed
    field int y; //changes
    
    field int mem_address;
    field int cur_location;
    
        
    constructor Helicopter new(int Ax, int Ay){
        let x=Ax;
        let y=Ay;
        let cur_location=(x/16)+(y*32);
        //do heloLand(0); //sets logo to top left
        do helicopterdraw(cur_location); //sets initial helicopter to center of screen
        do landingPadDraw((412/16)+(480*16)); //256/16 + 256*32 ie bottom middle
        
        return this;
    }
    //garbage collection
    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }


    /** Erases the screen. */
   
   method void erase() {
      do Screen.setColor(false);
      do helicopterdraw(cur_location);
      //do Screen.heloLand(0);
      do landingPadDraw((256/16)+(510*16));
      return;
   }
   method int get_cur_location(){ 
        return cur_location;
   }
   method int get_x(){
       return x;
   }
   method int get_y(){
       return y;
   }

   
   method void fly_up() { //moves helicopter up and sets fall rate to 2 (Default)
      if (y > 1) {
        
        do Screen.setColor(false);
        do helicopterdraw((x/16)+((y-1)*32));
        let y = y - 2;
        do Screen.setColor(true);
        let cur_location = (x/16)+(y*32);
        do helicopterdraw(cur_location);
        do Screen.setColor(false);
        do helicopterdraw(cur_location);
        do Screen.setColor(true);
        do helicopterdraw2(cur_location);
        do Sys.wait(5);
        do helicopterdraw(cur_location);
        do Sys.wait(15);
         
      }
      return;
   }
  
   method void fly_down() {//helicopter falling increases fall rate (falls faster)
        
      if (y < 236) {
         do Screen.setColor(false);
         do helicopterdraw(cur_location);
         let y = y + 2;
         let cur_location =(x/16)+(y*32);
         do Screen.setColor(true);
         do helicopterdraw(cur_location);
         do Screen.setColor(false);
         do helicopterdraw(cur_location);
         do Screen.setColor(true);
         do helicopterdraw2(cur_location);
         do Sys.wait(5);
         do helicopterdraw(cur_location);
         do Sys.wait(15);
      }
      return;
   }
   method void fly_left(){
       if (x > 2) {
           do Screen.setColor(false);
           do eraser(cur_location);
           let x=x-1;
           let cur_location=(x/16)+(y*32);
           do Screen.setColor(true);
           do helicopterdraw(cur_location);
           do Screen.setColor(false);
           do helicopterdraw(cur_location);
           do Screen.setColor(true);
           do helicopterdraw2(cur_location);
           do Sys.wait(5);
           do helicopterdraw(cur_location);
           
       }
       return;
   }
   method void fly_right(){
       if (x <  480 ) {
           do Screen.setColor(false);
           do eraser(cur_location);
           let x=x+1;
           let cur_location=((x/16)+(y*32));
           do Screen.setColor(true);
           do helicopterdraw(cur_location);
           do Screen.setColor(false);
           do helicopterdraw(cur_location);
           do Screen.setColor(true);
           do helicopterdraw2(cur_location);
           do Sys.wait(5);
           do helicopterdraw(cur_location);
           
       }
       return;
   }


    method void helicopterdraw(int location) { //sprite for helicopter //need to make it at top center of screen
        
        do Memory.poke((16384+location)+0, 0);
        do Memory.poke((16384+location)+32, 0);
        do Memory.poke((16384+location)+64, 0);
        do Memory.poke((16384+location)+64, 128);
        do Memory.poke((16384+location)+128, 32766);
        do Memory.poke((16384+location)+160, 128);
        do Memory.poke((16384+location)+192, 128);
        do Memory.poke((16384+location)+224, 130);
        do Memory.poke((16384+location)+256, 8135);
        do Memory.poke((16384+location)+288, 9250);
        do Memory.poke((16384+location)+320, 17470);
        do Memory.poke((16384+location)+352, 31750);
        do Memory.poke((16384+location)+384, 16396);
        do Memory.poke((16384+location)+416, 16376);
        do Memory.poke((16384+location)+448, 32764);//-30590
        do Memory.poke((16384+location)+480, 0);
        
        return;
    }
    method void helicopterdraw2(int location) { //sprite for helicopter //need to make it at top center of screen
        
        do Memory.poke((16384+location)+0, 0);
        do Memory.poke((16384+location)+32, 0);
        do Memory.poke((16384+location)+64, 0);
        do Memory.poke((16384+location)+64, 128);
        do Memory.poke((16384+location)+128, 0);
        do Memory.poke((16384+location)+160, 128);
        do Memory.poke((16384+location)+192, 128);
        do Memory.poke((16384+location)+224, 130);
        do Memory.poke((16384+location)+256, 8135);
        do Memory.poke((16384+location)+288, 9250);
        do Memory.poke((16384+location)+320, 17470);
        do Memory.poke((16384+location)+352, 31750);
        do Memory.poke((16384+location)+384, 16396);
        do Memory.poke((16384+location)+416, 16376);
        do Memory.poke((16384+location)+448, 32764);//-30590
        do Memory.poke((16384+location)+480, 0);
        
        return;
    }
  
    method void helo_land_logo(int location) { //draws logo
        
        do Memory.poke((16384+location)+0, -7447);
        do Memory.poke((16384+location)+32, -24023);
        do Memory.poke((16384+location)+64, -23825);
        do Memory.poke((16384+location)+96, -24023);
        do Memory.poke((16384+location)+128, -4375);
        do Memory.poke((16384+location)+160, 0);
        do Memory.poke((16384+location)+192, 26913);
        do Memory.poke((16384+location)+224, -21679);
        do Memory.poke((16384+location)+256, -21135);
        do Memory.poke((16384+location)+288, -22191);
        do Memory.poke((16384+location)+320, 26967);
        do Memory.poke((16384+location)+352, 0);
        do Memory.poke((16384+location)+384, 0);
        do Memory.poke((16384+location)+416, 0);
        do Memory.poke((16384+location)+448, 0);
        do Memory.poke((16384+location)+480, 0);
        return;
        
    }
    method void landingPadDraw(int location) { //draws landing pad need to make it at bottom center
        
        do Memory.poke((16384+location)+0, 0);
        do Memory.poke((16384+location)+32, 0);
        do Memory.poke((16384+location)+64, 0);
        do Memory.poke((16384+location)+96, 0);
        do Memory.poke((16384+location)+128, 0);
        do Memory.poke((16384+location)+160, 0);
        do Memory.poke((16384+location)+192, 0);
        do Memory.poke((16384+location)+224, 0);
        do Memory.poke((16384+location)+256, 0);
        do Memory.poke((16384+location)+288, 0);
        do Memory.poke((16384+location)+320, 0);
        do Memory.poke((16384+location)+352, 0);
        do Memory.poke((16384+location)+384, 0);
        do Memory.poke((16384+location)+416, 16380);
        do Memory.poke((16384+location)+448, 16386);
        do Memory.poke((16384+location)+480, -32767);
        return;
        
    }
    method void eraser(int location){
		
		do Memory.poke((16384+location)+0, 0);
        do Memory.poke((16384+location)+32, 0);
        do Memory.poke((16384+location)+64, 0);
        do Memory.poke((16384+location)+96, 0);
        do Memory.poke((16384+location)+128, 0);
        do Memory.poke((16384+location)+160, 0);
        do Memory.poke((16384+location)+192, 0);
        do Memory.poke((16384+location)+224, 0);
        do Memory.poke((16384+location)+256, 0);
        do Memory.poke((16384+location)+288, 0);
        do Memory.poke((16384+location)+320, 0);
        do Memory.poke((16384+location)+352, 0);
        do Memory.poke((16384+location)+384, 0);
        do Memory.poke((16384+location)+416, 0);
        do Memory.poke((16384+location)+448, 0);
        do Memory.poke((16384+location)+480, 0);
    return;
}
}